{"version":3,"sources":["styling/theme.js","styling/global.js","components/Container/Container.tsx","components/Title/Title.tsx","components/Body/Body.tsx","components/Project/Project.tsx","components/Project/projects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","textPrimary","textSecondary","accent1","screenWidth","medium","large","GlobalStyles","createGlobalStyle","Container","props","StyledContainer","children","styled","main","bodyPrimary","Title","StyledTitle","Body","StyledBody","Project","title","summary","demo","repo","StyledProject","className","href","rel","target","article","projArr","tech","map","i","index","key","StyledAlert","div","Projects","section","App","useState","isHidden","setIsHidden","timer","setTimeout","handleAlert","clearTimeout","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","copy","role","aria-label","onClick","id","style","position","top","opacity","width","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.397d6c09.chunk.js","sourcesContent":["export const theme = {\r\n  textPrimary: '#191414',\r\n  textSecondary: '#101010',\r\n\r\n  accent1: '#ff6666',\r\n\r\n  screenWidth: {\r\n    medium: '(min-width: 424px)',\r\n    large: '(min-width: 824px)',\r\n  },\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\n@import url('href=\"https://fonts.googleapis.com/css?family=Lato:700|Montserrat:500,700&display=swap\"');\r\n    \r\n    * {\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    \r\n    html, body {\r\n        font-family: 'Lato', sans-serif;\r\n    }\r\n    *, *::after, *::before {\r\n        box-sizing: border-box;\r\n    }\r\n    body {\r\n        overflow-x: hidden;\r\n        align-items: center;\r\n        color: ${({ theme }) => theme.textPrimary};\r\n        height: 100vh;\r\n        width: 100vw;\r\n        text-rendering: optimizeLegibility;\r\n        line-height: 1.5;\r\n    }\r\n    \r\n    h1, h2, h3, h4, h5, h6 {\r\n        font-family: 'Montserrat', sans-serif;\r\n        font-weight: 700;\r\n        line-height: 1;\r\n    }\r\n\r\n    .hidden {\r\n        display: none !important;\r\n        transform: translateY(-100%);\r\n        opacity: 0;\r\n        transition-duration: 1s;\r\n    }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function Container(\r\n  props: JSX.ElementChildrenAttribute,\r\n): JSX.Element {\r\n  return <StyledContainer>{props.children}</StyledContainer>\r\n}\r\n\r\nconst StyledContainer = styled.main`\r\n  background-color: ${({ theme }) => theme.bodyPrimary};\r\n  margin: auto;\r\n  display: grid;\r\n\r\n  @media screen and (min-width: 1000px){\r\n    grid-template-columns: auto auto;\r\n    width: 80vw;\r\n  }\r\n\r\n  @media screen and (min-width: 2000px) {\r\n    width: 60vw;\r\n    max-height: 40vh !important; \r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function Title(\r\n  props: JSX.ElementChildrenAttribute,\r\n): JSX.Element {\r\n  return <StyledTitle>{props.children}</StyledTitle>\r\n}\r\n\r\nconst StyledTitle = styled.main`\r\n  padding: 2rem;\r\n\r\n  h1 {\r\n    width: 100%;\r\n    font-size: 6rem;\r\n    font-weight: 900;\r\n    background-image: repeating-linear-gradient(\r\n    -45deg,\r\n    #191414,\r\n    #191414 6px,\r\n    #fff 3px,\r\n    #fff 10px\r\n  );\r\n\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n  }\r\n\r\n  @media screen and ${({ theme }) => theme.screenWidth.medium} {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 8rem;\r\n  }\r\n  @media screen and ${({ theme }) => theme.screenWidth.large} {\r\n    font-size: 8rem;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function Body(\r\n  props: JSX.ElementChildrenAttribute,\r\n): JSX.Element {\r\n  return <StyledBody>{props.children}</StyledBody>\r\n}\r\n\r\nconst StyledBody = styled.main`\r\n  padding: 2rem;\r\n  max-width: 80%;\r\n\r\n  ul {\r\n    list-style: none;\r\n    display: inline-flex;\r\n    flex-direction: row;\r\n\r\n    > li {\r\n      padding: 1rem 1rem 0 0;\r\n    }\r\n\r\n    button {\r\n      background: none;\r\n      border: none;\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n    }\r\n\r\n    button, a {\r\n      color: ${({ theme }) => theme.textSecondary};\r\n      font-size: 1rem;\r\n      transition-duration: 0.5s;\r\n    }\r\n\r\n    button:hover, a:hover {\r\n    transition-duration: 0.6s;\r\n    transition-delay: 0.4s;\r\n    text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  @media screen and ${({ theme }) => theme.screenWidth.large} {\r\n    display: flex;\r\n    align-items: center;\r\n    max-width: 80%;\r\n    align-self: right;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  @media screen and (min-width: 1000px){\r\n    /* padding-top: 15vh; */\r\n  }\r\n\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface IProjectProps {\r\n  title: string\r\n  summary: string\r\n  demo: string\r\n  repo: string\r\n}\r\n\r\nconst Project = ({ title, summary, demo, repo }: IProjectProps):JSX.Element => {\r\n  return (\r\n    <StyledProject>\r\n      <div className='content'>\r\n        <div className='titleContainer'>\r\n          <h2>{title}</h2>\r\n          <a href={demo} rel='noopener noreferrer' target='_blank'>demo</a>\r\n          &nbsp;\r\n          <a href={repo} rel='noopener noreferrer' target='_blank'>repo</a>\r\n        </div>\r\n        <div className='summary'>\r\n          {summary}\r\n        </div>\r\n      </div>\r\n    </StyledProject>\r\n  )\r\n}\r\n\r\nexport default Project\r\n\r\nconst StyledProject = styled.article`\r\n  height: 100%;\r\n  max-width: 100%;\r\n\r\n  border: 3px solid black;\r\n  border-radius: 10px;\r\n\r\n  padding: 1rem;\r\n  margin: 1rem 0;\r\n\r\n  @media screen and ${({ theme }) => theme.screenWidth.large} {\r\n    flex-direction: column;\r\n    .summary {\r\n      max-width: 80%;\r\n      padding-left: 1rem;\r\n    }\r\n    .content {\r\n      width: 100%;\r\n      height: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: black;\r\n  }\r\n\r\n\r\n  .titleContainer {\r\n    min-width: 35%;\r\n  }\r\n\r\n  .summary {\r\n    width: 100%;\r\n  }\r\n\r\n\r\n`\r\n","import React from 'react'\r\nimport Project from './Project'\r\n\r\nconst projects = [\r\n  {\r\n    title: 'Auth API',\r\n    summary: 'A CRUD-functional authentication/authorization API using JSON Web Tokens and an opinionated GraphQL endpoint. Users can create unique accounts, log in and out, and delete their accounts.',\r\n    tech: [\r\n      'TypeScript', 'Apollo Server', 'Node', 'Prisma2 (Migrate)', 'Postgres', 'Docker', 'BCryptjs', 'JWT',\r\n    ],\r\n    demo: 'https://drive.google.com/file/d/1zOqEtA6WHoQzJJETmJy3nmZ7ob0oqy9u/preview',\r\n    repo: 'https://github.com/ArdenJ/gql-auth-api',\r\n  },\r\n  {\r\n    title: 'XState Video Player',\r\n    summary: 'This is one of my first proper attempts of using a finite state machine to control app state. Users can play and pause the video and drag the progress bar to navigate through the video.',\r\n    tech: [\r\n      'React', 'XState', 'Styled-Components / inline CSS', 'Webpack',\r\n    ],\r\n    demo: 'https://s9php.sse.codesandbox.io/',\r\n    repo: 'https://github.com/ArdenJ/videoplayer',\r\n  },\r\n  {\r\n    title: 'Apollo/React Calendar',\r\n    summary: 'A simple calendar that parses events from a GraphQL API to a calendar component. Users can create, read, update, and delete events, as well as cycle through months using the UI.',\r\n    tech: [\r\n      'TypeScript', 'React', 'Apollo', 'Node', 'Styled-Components', 'Webpack',\r\n    ],\r\n    demo: 'https://drive.google.com/file/d/1eiy_-kSahI7kw28D-icBHoDfMv2voY3T/preview',\r\n    repo: 'https://github.com/ArdenJ/calendar',\r\n  },\r\n  {\r\n    title: 'React Audio Player',\r\n    summary: 'A component that extends the html audio element and renders encoded data including the track title, and album art.',\r\n    tech: [\r\n      'React', 'Styled-Components',\r\n    ],\r\n    demo: 'https://w9c0x.csb.app/',\r\n    repo: 'https://github.com/ArdenJ/audioplayer',\r\n  },\r\n]\r\n\r\nexport const projArr = projects.map((i, index) => {\r\n  return <Project key={index} title={i.title} summary={i.summary} demo={i.demo} repo={i.repo}/>\r\n})\r\n","import React, { useState } from 'react'\r\nimport styled, { ThemeProvider } from 'styled-components'\r\n\r\nimport { theme } from './styling/theme'\r\nimport { GlobalStyles } from './styling/global'\r\n\r\nimport { Title, Body, Container } from './components/index'\r\n\r\nimport { projArr } from './components/Project/projects'\r\n\r\nconst App: React.FC = () => {\r\n  const [isHidden, setIsHidden] = useState(false)\r\n\r\n  function copy() {\r\n    const el = document.createElement('textarea')\r\n    el.value = 'j.gaddas@outlook.com'\r\n    document.body.appendChild(el)\r\n    el.select()\r\n    document.execCommand('copy')\r\n    document.body.removeChild(el)\r\n  }\r\n\r\n  const timer = setTimeout(() => setIsHidden(false), 3000)\r\n\r\n  function handleAlert() {\r\n    if (isHidden === true) clearTimeout(timer)\r\n    if (isHidden === false) clearTimeout(timer)\r\n    copy()\r\n    setIsHidden(true)\r\n    return timer\r\n  }\r\n\r\n  const Alert = () => {\r\n    return (\r\n      <div id='alert' style={{\r\n        position: 'fixed',\r\n        top: '0',\r\n        opacity: 1,\r\n        width: '100vw',\r\n        display: 'flex',\r\n        justifyContent: 'spaceAround',\r\n      }}>\r\n        <StyledAlert className={isHidden ? '' : 'hidden' }>\r\n          <span>copied to clipboard!</span>\r\n          <button onClick={() => setIsHidden(!isHidden)}>\r\n            <span>&times;</span>\r\n          </button>\r\n        </StyledAlert>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyles />\r\n      <Container>\r\n        <div className='content2'>\r\n          {/* Title */}\r\n          <Title>\r\n            <h1>hi I&apos;m<br/>arden</h1>\r\n          </Title>\r\n          {/* Content */}\r\n          <Body>\r\n            <div>\r\n              and I&apos;m a software developer based in London. I&apos;ve been coding for over a year and mainly work with <strong>JavaScript/TypeScript</strong>, <strong>Node</strong>, and <strong>GraphQL</strong>. Perhaps more importantly, I&apos;m an enthusiastic team member, who is highly-motivated by technical and creative challenges. <span role=\"img\" aria-label=\"nerd-face\">🤓</span><br/>\r\n              <strong>I am also actively looking for my first role - so, if you think I might be a good fit for your team, please do get in touch!</strong><br/>\r\n              <ul>\r\n                <li><a href='https://www.github.com/ArdenJ' target='blank' rel='noopener noreferrer'>github</a></li>\r\n                <li><a href='https://www.linkedin.com/in/arden-james/' target='blank' rel='noopener noreferrer'>linkedin</a></li>\r\n                <li><button onClick={() => handleAlert()}>email</button></li>\r\n              </ul>\r\n            </div>\r\n          </Body>\r\n        </div>\r\n        <Projects>\r\n          {projArr}\r\n        </Projects>\r\n      </Container>\r\n      <Alert />\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nconst StyledAlert = styled.div`\r\n  min-width: 300px;\r\n  margin: 0 auto;\r\n  color: #000;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: ${({ theme }) => theme.accent1};\r\n\r\n  span {\r\n    padding: 1rem;\r\n  }\r\n\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    color: #000;\r\n    font-size: 2.5rem;\r\n  }\r\n`\r\n\r\nconst Projects = styled.section`\r\n  padding: 0 2rem;\r\n\r\n  @media screen and ${({ theme }) => theme.screenWidth.large} {\r\n\r\n    height: 100vh;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    top: 0;\r\n  }\r\n`\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}